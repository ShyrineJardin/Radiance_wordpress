<?php

namespace AiosInitialSetup\App\Modules\AutoGeneratePagesClassicEditor;

trait Generate
{
	public function generate($postId, $slug, $type)
	{
	    // Check if selected theme is in array
        if (! in_array($type, [
            'amante-ii',
            'iconic',
            'element',
            'legacy',
            'metropolitan',
            'maven',
            'vega',
            'radiance',
            'purist',
            'endeavor',
            'galaxy',
            'panorama',
            'beacon',
            'classic',
            'modern',
            'minimalist'
        ])) {
            return [
                'success' => false,
                'message' => 'Selected type doesn\'t exists.'
            ];
        }

        $response = wp_remote_get(
            plugin_dir_url(__FILE__) . 'page.json',
            [
                'timeout' => 45,
                'blocking' => true,
                'cookies' => [],
                'sslverify' => false,
            ]
        );

        if ( !is_wp_error( $response ) ) {
            $json_data = json_decode($response['body'], true);
            $pages = $json_data['pages'][0];

            if (isset($pages[$type][0][$slug])) {
                $data = $pages[$type][0][$slug][0];
                $formId = 0;
                $inlineContactFormId = 0;

                // Generate Form
                if ($data['has_form']) {
                    $forms = $json_data['forms'][0];

                    if (isset($forms[$type][0][$slug])) {
                        $formId = $this->updateOrCreateForm($forms[$type][0][$slug][0], $json_data['defaults'][0]['messages']);

                        // If form ID is 0 there is an error in generating
                        if ($formId === 0) {
                            return [
                                'success' => false,
                                'message' => 'We encounter issue while generating contact form.'
                            ];
                        }
                    } else {
                        return [
                            'success' => false,
                            'message' => 'Contact Form from selected page doesn\'t exists.'
                        ];
                    }

                    if (isset($forms[$type][0]['inline-contact'])) {
                        $inlineContactFormId = $this->updateOrCreateForm($forms[$type][0]['inline-contact'][0], $json_data['defaults'][0]['messages']);

                        // If form ID is 0 there is an error in generating
                        if ($formId === 0) {
                            return [
                                'success' => false,
                                'message' => 'We encounter issue while generating inline contact form.'
                            ];
                        }
                    }
                }

                // Generate Page
                $postDetails = get_post((int) $postId);
                $postContent = $formId !== 0 ? str_replace('[contact-form-7-page]', "[contact-form-7 id=\"{$formId}\" html_class=\"use-floating-validation-tip\"]", $data['content']) : $data['content'];
                $postContent = $inlineContactFormId !== 0 ? str_replace('[contact-form-7-inline-contact]', "[contact-form-7 id=\"{$inlineContactFormId}\" html_class=\"use-floating-validation-tip\"]", $postContent) : $postContent;
                $updatePostId = wp_update_post([
                    'ID' => (int) $postId,
                    'post_title' => $postDetails->post_title === 'Auto Draft' ? str_replace(' (Auto-generated by AIOS Initial Setup)', '', $data['title']) : $postDetails->post_title,
                    'post_name' => $postDetails->post_name === '' ? $data['slug'] : $postDetails->post_name,
                    // Update page content if form ID is not 0
                    'post_content' => $postContent,
                    'post_status' => 'publish',
                    'post_author' => 1,
                    'page_template' => 'default'
                ]);
                update_post_meta((int) $postId, "ai_post_page_p", "on");

                // Save post ID to options
                $option = get_option(AIOS_AUTO_GENERATE_PAGES, []);
                $option[(int) $postId] = [
                    'type' => $type,
                    'theme' => $slug,
                    'has_script' => $data['has_script'],
                    'has_slick' => $data['has_slick'],
                    'product_tye' => $data['product_tye'],
                ];

                // Delete option first
                delete_option(AIOS_AUTO_GENERATE_PAGES);

                // Update option
                update_option(AIOS_AUTO_GENERATE_PAGES, $option);

                return [
                    'success' => true,
                    'message' => 'Page Generated',
                    'edit' => get_edit_post_link($updatePostId, '&'),
                    'edit_id' => $updatePostId,
                ];
            } else {
                return [
                    'success' => false,
                    'message' => 'Page selected doesn\'t exists.'
                ];
            }
        } else {
            return [
                'success' => false,
                'message' => $response->get_error_message()
            ];
        }
	}

    /**
     * Update or Create Form
     *
     * @param $data
     * @param $messages
     * @return int
     */
    private function updateOrCreateForm($data, $messages)
    {
        $title = trim($data['title']);
        $contactForm = wpcf7_get_contact_form_by_title($title);

        // For existing form let's update
        // Else create form
        if ($contactForm) {
            $mailMeta = get_post_meta($contactForm->id(), '_mail', true);

            $data['mail']['sender'] = $mailMeta['sender'];
            $data['mail']['recipient'] = $mailMeta['recipient'];
            $data['mail']['additional_headers'] = $mailMeta['additional_headers'];

            update_post_meta($contactForm->id(), '_messages', $messages);
            update_post_meta($contactForm->id(), '_mail', $data['mail']);
            update_post_meta($contactForm->id(), '_form', $data['form']);

            return $contactForm->id();
        } else {
            $formID = wp_insert_post([
                'post_title'    => $data['title'],
                'post_content'  => 'Auto Generated by Initial Setup',
                'post_type'     => 'wpcf7_contact_form',
                'post_status'   => 'publish',
                'post_author'   => 1
            ]);

            // If form successfully generated
            if ($formID) {
                update_post_meta($formID, '_messages', $messages);
                update_post_meta($formID, '_mail', $data['mail']);
                update_post_meta($formID, '_form', $data['form']);

	            return $formID;
            } else {
                return 0;
            }
        }
    }
}
